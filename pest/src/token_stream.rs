use futures::Poll;
use futures::stream::Stream;
use futures::sync::mpsc::UnboundedReceiver;

use super::token::Token;

/// A `Stream` of `Token` objects generated by the `Parser`.
pub struct TokenStream<Rule> {
    receiver: UnboundedReceiver<Token<Rule>>
}

impl<Rule> TokenStream<Rule> {
    /// Creates a new `TokenStream` from a `Token`-generating `Receiver`.
    ///
    /// # Examples
    ///
    /// ```
    /// # extern crate futures;
    /// # extern crate pest;
    /// # use futures::sync::mpsc::unbounded;
    /// # use pest::{Token, TokenStream};
    /// # fn main() {
    /// let (_, r) = unbounded::<Token<()>>();
    ///
    /// let stream = TokenStream::new(r);
    /// # }
    /// ```
    pub fn new(receiver: UnboundedReceiver<Token<Rule>>) -> TokenStream<Rule> {
        TokenStream {
            receiver: receiver
        }
    }
}

impl<Rule> Stream for TokenStream<Rule> {
    type Item  = Token<Rule>;
    type Error = ();

    fn poll(&mut self) -> Poll<Option<Token<Rule>>, ()> {
        self.receiver.poll()
    }
}
